# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CAC-Proxy Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: The version of the release, if needed (x.y.z-p)
        required: false
        type: string
      next:
        description: Is it a next release ?
        required: true
        type: boolean
      deploy:
        description: Deploy to public website?
        required: true
        type: boolean

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: 'main'
          token: ${{secrets.GCOLLIN_ACTIONS_TOKEN}}
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      - name: Version
        if: ${{ success() && ( inputs.version == '') }}
        run: |
          PACKAGE_VERSION=$(npm view cookie-aware-cors-proxy versions --json | jq -r '.[-1]')
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
          npm version $PACKAGE_VERSION --allow-same-version --git-tag-version=false
      - name: Version Patch
        if: ${{ success() && ( inputs.version == '') && ( inputs.next == true) }}
        run: |
          PACKAGE_VERSION=$(npm version patch --git-tag-version=false)
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
      - name: Version Minor
        if: ${{ success() && ( inputs.version == '') && ( inputs.next == false) }}
        run: |
          PACKAGE_VERSION=$(npm version minor --git-tag-version=false)
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
      - name: Version
        if: ${{ success() && ( inputs.version != '') }}
        run: |
          PACKAGE_VERSION=${{inputs.version}}
          echo "PACKAGE_VERSION=v$PACKAGE_VERSION" >> $GITHUB_ENV
          npm version $PACKAGE_VERSION --allow-same-version --git-tag-version=false
      - name: Install
        run: |
          npm install
      - name: Build
        run: |
          npm run build
      - name: Unit tests
        run: |
          npm run test
      - name: Publish to Npm
        if: ${{ success() && ( inputs.next == true)}}
        run: |
          npm publish ./dist --access public --tag next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish to Npm
        if: ${{ success() && ( inputs.next == false) }}
        run: |
          npm publish ./dist --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Release library
        run: |
          npm run pack
          cd ./dist
          mv cookie-aware-cors-proxy-*.tgz cookie-aware-cors-proxy.tgz
      - uses: jmgilman/actions-generate-checksum@v1
        with:
          patterns: |
            dist/cookie-aware-cors-proxy.tgz
      - name: Create Github release
        uses: softprops/action-gh-release@master
        with:
          name: ${{env.PACKAGE_VERSION}}
          tag_name: ${{env.PACKAGE_VERSION}}
          files: |
            checksum.txt
            dist/cookie-aware-cors-proxy.tgz
      - name: Deploy to Shared server
        if: ${{ success() && ( inputs.deploy == true)}}
        uses: appleboy/scp-action@master
        with:
          host: shared.collin.best
          username: cac-proxy
          key: ${{ secrets.SHARED_KEY }}
          passphrase: ${{ secrets.SHARED_PASSPHRASE }}
          source: "dist/cookie-aware-cors-proxy.tgz"
          target: "/opt/yunohost/cac-proxy"
          strip_components: 1

      - name: Restart in Shared server
        if: ${{ success() && ( inputs.deploy == true)}}
        uses: appleboy/ssh-action@master
        with:
          host: shared.collin.best
          username: cac-proxy
          key: ${{ secrets.SHARED_KEY }}
          passphrase: ${{ secrets.SHARED_PASSPHRASE }}
          script: |
            rm -rf package
            tar -xzf "cookie-aware-cors-proxy.tgz"
            rm "cookie-aware-cors-proxy.tgz"
            ./restart-proxy.sh 
